/**
 * APIMATICCodeGenLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
 */

'use strict';

const _request = require('../Http/Client/RequestClient');
const _configuration = require('../configuration');
const _apiHelper = require('../APIHelper');
const _baseController = require('./BaseController');
const _fs = require('fs');

class CodeGenerationController {
    /**
     * @todo Add general description for this endpoint
     *
     * @param {string} apikey The API Key of the pre-configured API
     * @param {Template} template The template to use for code generation
     * @param {int} dl (optional) Example: 0
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static generateCodeFromAPreConfiguredAPI(apikey, template, dl, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _queryBuilder = `${_baseUri}${'/codegen1'}`;

        // process query parameters
        _queryBuilder = _apiHelper.appendUrlWithQueryParameters(_queryBuilder, {
            apikey,
            template: (template !== null) ? template : null,
            dl: (dl !== null) ? dl : 0,
        });

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    _callback(null, _response.body, _context);
                    _fulfill(_response.body);
                } else if (_response.statusCode === 401) {
                    const _err = { errorMessage: 'Unauthorized: Access is denied due to invalid credentials.',
                        errorCode: 401,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 412) {
                    const _err = { errorMessage: 'Precondition Failed',
                        errorCode: 412,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }

    /**
     * @todo Add general description for this endpoint
     *
     * @param {string} name The name of the API being used for code generation
     * @param {Format} format The format of the API description to use for code generation
     * @param {Template} template The template to use for code generation
     * @param {string} body TODO: type description here
     * @param {int} dl (optional) Example: 0
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static generateCodeFromAPIDescription1(name, format, template, body, dl, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _queryBuilder = `${_baseUri}${'/codegen1'}`;

        // process query parameters
        _queryBuilder = _apiHelper.appendUrlWithQueryParameters(_queryBuilder, {
            name,
            format: (format !== null) ? format : null,
            template: (template !== null) ? template : null,
            dl: (dl !== null) ? dl : 0,
        });

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare form data
        const _formData = {
            body: _fs.createReadStream(body),
        };

        // remove null values
        _apiHelper.cleanObject(_formData);

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'POST',
            formData: _formData,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    _callback(null, _response.body, _context);
                    _fulfill(_response.body);
                } else if (_response.statusCode === 401) {
                    const _err = { errorMessage: 'Unauthorized: Access is denied due to invalid credentials.',
                        errorCode: 401,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 412) {
                    const _err = { errorMessage: 'Precondition Failed',
                        errorCode: 412,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }

    /**
     * @todo Add general description for this endpoint
     *
     * @param {Template} template The template to use for code generation
     * @param {Format} format The format of the API description to use for code generation
     * @param {string} name The name of the API being used for code generation
     * @param {string} descriptionUrl The absolute public Uri for an API description doucment
     * @param {string} dl (optional) Example: 0
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static generateCodeFromAPIDescriptionUrl1(template,
        format,
        name,
        descriptionUrl,
        dl,
        callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _queryBuilder = `${_baseUri}${'/codegen1'}`;

        // process query parameters
        _queryBuilder = _apiHelper.appendUrlWithQueryParameters(_queryBuilder, {
            template: (template !== null) ? template : null,
            format: (format !== null) ? format : null,
            name,
            descriptionUrl,
            dl: (dl !== null) ? dl : '0',
        });

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    _callback(null, _response.body, _context);
                    _fulfill(_response.body);
                } else if (_response.statusCode === 401) {
                    const _err = { errorMessage: 'Unauthorized: Access is denied due to invalid credentials.',
                        errorCode: 401,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 412) {
                    const _err = { errorMessage: 'Precondition Failed',
                        errorCode: 412,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }

    /**
     * The code generation endpoint. The response is a path to the generated zip file relative to
     * https://apimatic.io/
     *
     * @param {string} name The name of the API being used for code generation
     * @param {Format} format The format of the API description to use for code generation
     * @param {Template} template The template to use for code generation
     * @param {string} body TODO: type description here
     * @param {int} dl (optional) Example: 1
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static generateCodeFromAPIDescription(name, format, template, body, dl, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _queryBuilder = `${_baseUri}${'/codegen'}`;

        // process query parameters
        _queryBuilder = _apiHelper.appendUrlWithQueryParameters(_queryBuilder, {
            name,
            format: (format !== null) ? format : null,
            template: (template !== null) ? template : null,
            dl: (dl !== null) ? dl : 1,
        });

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // prepare form data
        const _formData = {
            body: _fs.createReadStream(body),
        };

        // remove null values
        _apiHelper.cleanObject(_formData);

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'POST',
            formData: _formData,
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    _callback(null, _response.body, _context);
                    _fulfill(_response.body);
                } else if (_response.statusCode === 401) {
                    const _err = { errorMessage: 'Unauthorized: Access is denied due to invalid credentials.',
                        errorCode: 401,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 412) {
                    const _err = { errorMessage: 'Precondition Failed',
                        errorCode: 412,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }

    /**
     * @todo Add general description for this endpoint
     *
     * @param {Template} template The template to use for code generation
     * @param {Format} format The format of the API description to use for code generation
     * @param {string} name The name of the API being used for code generation
     * @param {string} descriptionUrl The absolute public Uri for an API description doucment
     * @param {int} dl (optional) Example: 1
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static generateCodeFromAPIDescriptionUrl(template,
        format,
        name,
        descriptionUrl,
        dl,
        callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _queryBuilder = `${_baseUri}${'/codegen'}`;

        // process query parameters
        _queryBuilder = _apiHelper.appendUrlWithQueryParameters(_queryBuilder, {
            template: (template !== null) ? template : null,
            format: (format !== null) ? format : null,
            name,
            descriptionUrl,
            dl: (dl !== null) ? dl : 1,
        });

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    _callback(null, _response.body, _context);
                    _fulfill(_response.body);
                } else if (_response.statusCode === 401) {
                    const _err = { errorMessage: 'Unauthorized: Access is denied due to invalid credentials.',
                        errorCode: 401,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 412) {
                    const _err = { errorMessage: 'Precondition Failed',
                        errorCode: 412,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }

    /**
     * @todo Add general description for this endpoint
     *
     * @param {string} apikey The API Key of the pre-configured API
     * @param {Template} template The template to use for code generation
     * @param {int} dl (optional) Example: 1
     *
     * @callback    The callback function that returns response from the API call
     *
     * @returns {Promise}
     */
    static generateCodeFromAPreConfiguredAPI1(apikey, template, dl, callback) {
        // create empty callback if absent
        const _callback = typeof callback === 'function' ? callback : () => undefined;

        // prepare query string for API call
        const _baseUri = _configuration.BASEURI;

        let _queryBuilder = `${_baseUri}${'/codegen'}`;

        // process query parameters
        _queryBuilder = _apiHelper.appendUrlWithQueryParameters(_queryBuilder, {
            apikey,
            template: (template !== null) ? template : null,
            dl: (dl !== null) ? dl : 1,
        });

        // validate and preprocess url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        // construct the request
        const _options = {
            queryUrl: _queryUrl,
            method: 'GET',
            username: _configuration.basicAuthUserName,
            password: _configuration.basicAuthPassword,
        };

        // build the response processing.
        return new Promise((_fulfill, _reject) => {
            _request(_options, (_error, _response, _context) => {
                let errorResponse;
                if (_error) {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                } else if (_response.statusCode >= 200 && _response.statusCode <= 206) {
                    _callback(null, _response.body, _context);
                    _fulfill(_response.body);
                } else if (_response.statusCode === 401) {
                    const _err = { errorMessage: 'Unauthorized: Access is denied due to invalid credentials.',
                        errorCode: 401,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else if (_response.statusCode === 412) {
                    const _err = { errorMessage: 'Precondition Failed',
                        errorCode: 412,
                        errorResponse: _response.body,
                    };
                    _callback(_err, null, _context);
                    _reject(_err);
                } else {
                    errorResponse = _baseController.validateResponse(_context);
                    _callback(errorResponse.error, errorResponse.response, errorResponse.context);
                    _reject(errorResponse.error);
                }
            });
        });
    }

}

module.exports = CodeGenerationController;
